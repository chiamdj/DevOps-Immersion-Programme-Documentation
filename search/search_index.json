{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1. Setting up the environment The first step to any React project is to install React and install any project dependencies we might need. 1.1 CodeSandbox We will be creating this project on CodeSandbox. Click on the Edit on CodeSandbox button below to create a new repository with the boilerplate code below: Save your work In order to avoid losing your work, it is recommended that you create a CodeSandbox account before moving on. You need a GitHub account to sign up. Creating a local Repository The repository you are forking comes from create-react-app , which is an officially supported way to create single-page React applications. See Create-React-App documentation . If you wish to use a Desktop Code IDE, you can install create-react-app to your project directory with the following code (replace my-app with the name of your app): npm npm init react-app my-app yarn yarn create react-app my-app Next, examine the project directory under the Files tab on the left. You should see something like the following: package.json public/ index.html src/ App.js index.js styles.css If you create a React project locally on your computer, there will be some additional files. For the project to build, these files must exist with exact filenames: public/index.html is the page template; src/index.js is the JavaScript entry point. You can delete or rename the other files. Some Additional Information You may create subdirectories inside src. For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won\u2019t see them. Only files inside public can be used from public/index.html. Read instructions below for using assets from JavaScript and HTML. You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation. Look through each of the files and try to infer what each file does. 1.2 Material-UI Material-UI contains react components for faster and easier web development. It is a React UI framework inspired by Google's Material Design as illustrated above, and provides a nice user interface for our react app. Material-UI is available as an npm package. See instructions to install to install Material-UI on your local project directory. On CodeSandbox, you can add Material-UI as a dependency by expanding the dependency blade, click add dependency and search/install the following packages: + 'material-ui/core' + 'material-ui/icons' When completed, move on to the next step where we set up the foundation of the app.","title":"1. Setting up the environment"},{"location":"#1-setting-up-the-environment","text":"The first step to any React project is to install React and install any project dependencies we might need.","title":"1. Setting up the environment"},{"location":"#11-codesandbox","text":"We will be creating this project on CodeSandbox. Click on the Edit on CodeSandbox button below to create a new repository with the boilerplate code below: Save your work In order to avoid losing your work, it is recommended that you create a CodeSandbox account before moving on. You need a GitHub account to sign up. Creating a local Repository The repository you are forking comes from create-react-app , which is an officially supported way to create single-page React applications. See Create-React-App documentation . If you wish to use a Desktop Code IDE, you can install create-react-app to your project directory with the following code (replace my-app with the name of your app): npm npm init react-app my-app yarn yarn create react-app my-app Next, examine the project directory under the Files tab on the left. You should see something like the following: package.json public/ index.html src/ App.js index.js styles.css If you create a React project locally on your computer, there will be some additional files. For the project to build, these files must exist with exact filenames: public/index.html is the page template; src/index.js is the JavaScript entry point. You can delete or rename the other files. Some Additional Information You may create subdirectories inside src. For faster rebuilds, only files inside src are processed by webpack. You need to put any JS and CSS files inside src, otherwise webpack won\u2019t see them. Only files inside public can be used from public/index.html. Read instructions below for using assets from JavaScript and HTML. You can, however, create more top-level directories. They will not be included in the production build so you can use them for things like documentation. Look through each of the files and try to infer what each file does.","title":"1.1 CodeSandbox"},{"location":"#12-material-ui","text":"Material-UI contains react components for faster and easier web development. It is a React UI framework inspired by Google's Material Design as illustrated above, and provides a nice user interface for our react app. Material-UI is available as an npm package. See instructions to install to install Material-UI on your local project directory. On CodeSandbox, you can add Material-UI as a dependency by expanding the dependency blade, click add dependency and search/install the following packages: + 'material-ui/core' + 'material-ui/icons' When completed, move on to the next step where we set up the foundation of the app.","title":"1.2 Material-UI"},{"location":"2_base/","text":"2. The Final Product UI-UX Design Before we start designing the app, it is a good idea to plan out what the app might look like. In this demo, we will be creating a shopping list like the one below: Make a mental note of the components and their hierarchies that we will have to code: - Card - Title - Divider - List - ListIcon - ListItem - DeleteIcon - Button UI-UX Design For large projects, UI-UX design is a significant part of the development process and developers often use applications such as Figma or Adobe XD to design their user interfaces. For small projects, doodling on paper or Microsoft PowerPoint would be sufficient. Bottom-up or Top-down? Should you start developing the components from bottom-up (i.e. the most deeply nested component in the hierarchy to the outermost) or top-down (vice-versa)? There is no correct option, it depends on the developer's preference. For beginners, I recommend the top-down option, which we will follow in this project. App Behaviour The reason why we are using React to create our web app (instead of traditional HTML/CSS/JS) is because React provides an easy framework for us to create interactive applications that are responsive to user input (e.g. mouse click, key press, hover etc.). React is also very common in single page applications . In our shopping list, users will be able to: Add an iterm to the list by click on the add item button, typing their item and pressing Enter, Delete an item by clicking on the red garbage icon Now that you have a good idea of how to create the app, we can move on to start developing the Card component first.","title":"2. The Final Product"},{"location":"2_base/#2-the-final-product","text":"","title":"2. The Final Product"},{"location":"2_base/#ui-ux-design","text":"Before we start designing the app, it is a good idea to plan out what the app might look like. In this demo, we will be creating a shopping list like the one below: Make a mental note of the components and their hierarchies that we will have to code: - Card - Title - Divider - List - ListIcon - ListItem - DeleteIcon - Button UI-UX Design For large projects, UI-UX design is a significant part of the development process and developers often use applications such as Figma or Adobe XD to design their user interfaces. For small projects, doodling on paper or Microsoft PowerPoint would be sufficient. Bottom-up or Top-down? Should you start developing the components from bottom-up (i.e. the most deeply nested component in the hierarchy to the outermost) or top-down (vice-versa)? There is no correct option, it depends on the developer's preference. For beginners, I recommend the top-down option, which we will follow in this project.","title":"UI-UX Design"},{"location":"2_base/#app-behaviour","text":"The reason why we are using React to create our web app (instead of traditional HTML/CSS/JS) is because React provides an easy framework for us to create interactive applications that are responsive to user input (e.g. mouse click, key press, hover etc.). React is also very common in single page applications . In our shopping list, users will be able to: Add an iterm to the list by click on the add item button, typing their item and pressing Enter, Delete an item by clicking on the red garbage icon Now that you have a good idea of how to create the app, we can move on to start developing the Card component first.","title":"App Behaviour"},{"location":"3_card/","text":"3. Our First Component The first component we will develop is the Card. Cards are surfaces that display content and actions on a single topic. They should be easy to scan for relevant and actionable information. Elements, like text and images, should be placed on them in a way that clearly indicates hierarchy. In this project, we use the Card component as a surface for all our other components. For more information on the Card component, see https://material-ui.com/components/cards/ . 3.1 HTML Configuration Before we start creating any React components, adding the following code in the index.html file between the header and body tags: < style > html , body , # root , # root > div { height : 100 % ; margin : 0 ; } </ style > This code block removes all the margins in the React App (defaults to 8px) and stretches the App to fill 100% of the browser height. Next, like HTML, we also create a separate .css file to store our CSS styles for our React components. Create a file App.css in the same directory as App.js and import it before the function App : import \"./App.css\" 3.2 App.js Navigate to the App.js file in the Files directory. Note that you should see \"Edit src/App.js and save to reload.\" in the Browser. Also note the boilerplate code already included: import React from \"react\" ; import \"./styles.css\" ; export default function App () { return ( < div className = \"App\" > < h1 > Hello CodeSandbox < /h1> < h2 > Start editing to see some magic happen !< /h2> < /div> ); } There are two parts to the code: Importing components : React is imported into the JavaScript file. This is necessary to distinguish it from non-React JS files. Other CSS and image files are also imported. App Function : Contains JSX code, which allows us to write HTML in React in order to produce React elements. It is neither HTML nor JS. You can read more about JSX here . We also set this function as the default export for App.js . Where is the function App consumed? This App function is imported in index.js , where it is rendered to the React DOM here at the 'root' HTML DOM node. ReactDOM . render ( < React . StrictMode > < App /> < /React.StrictMode>, document . getElementById ( 'root' ) ); Read more about rendering React elements to the DOM here . 3.3 Rendering a Card First, delete everything within the div tag. import React from 'react'; import logo from './logo.svg'; import './App.css'; function App() { return ( <div className=\"App\"> </div> ); } export default App; What is className ? className is a prop used in React for adding CSS classes to React components. You can define your styles in a separate *.css file as usual and refer to them using className . What are React props? Props are arguments passed into React components. React Props are like function arguments in JavaScript and attributes in HTML. To send props into a component, use the same syntax as HTML attributes: Next, add the following CSS styles to App.css : . App { display : flex ; align-items : center ; justify-content : center ; background-color : #80cbc4 ; } Next, refer to the Material-UI documentation on the Card component. Study the sample code for a Simple Card . import React from 'react'; import { makeStyles } from '@material-ui/core/styles'; import Card from '@material-ui/core/Card'; import CardActions from '@material-ui/core/CardActions'; import CardContent from '@material-ui/core/CardContent'; import Button from '@material-ui/core/Button'; import Typography from '@material-ui/core/Typography'; const useStyles = makeStyles({ root: { minWidth: 275, }, bullet: { display: 'inline-block', margin: '0 2px', transform: 'scale(0.8)', }, title: { fontSize: 14, }, pos: { marginBottom: 12, }, }); export default function SimpleCard() { const classes = useStyles(); const bull = <span className={classes.bullet}>\u2022</span>; return ( <Card className={classes.root}> <CardContent> <Typography className={classes.title} color=\"textSecondary\" gutterBottom> Word of the Day </Typography> <Typography variant=\"h5\" component=\"h2\"> be{bull}nev{bull}o{bull}lent </Typography> <Typography className={classes.pos} color=\"textSecondary\"> adjective </Typography> <Typography variant=\"body2\" component=\"p\"> well meaning and kindly. <br /> {'\"a benevolent smile\"'} </Typography> </CardContent> <CardActions> <Button size=\"small\">Learn More</Button> </CardActions> </Card> ); } Now we only need the Card surface and not the content. We can simplify the code as follows: <Card> <CardContent> </CardContent> <CardActions> </CardActions> </Card> Now this to App.js within the div tag. import React from \"react\"; import \"./App.css\"; import { Card } from \"@material-ui/core\"; function App() { return ( <div className=\"App\"> <Card className=\"card\"> <CardContent /> <CardActions /> </Card> </div> ); } export default App; You will notice errors popping up immediately, stating that React components like Card are missing. To fix this, add the necesary imports to the top, below the first line (where React is imported): import { Card , CardContent , CardActions } from \"@material-ui/core\" ; Finally, add the following styles to App.css . This will center the component vertically and horizontally, and change the background color. . card { width : 500 px ; height : 500 px ; padding : 10 px } To apply these CSS styles on the Card component, add a className prop it referencing .card : <Card className=\"card\"> 3.4 Final Result Your final code and App should look like this: import React from \"react\"; import \"./App.css\"; import { Card, CardContent, CardActions } from \"@material-ui/core\"; function App() { return ( <div className=\"App\"> <Card className=\"card\"> <CardContent /> <CardActions /> </Card> </div> ); } export default App;","title":"3. Our First Component"},{"location":"3_card/#3-our-first-component","text":"The first component we will develop is the Card. Cards are surfaces that display content and actions on a single topic. They should be easy to scan for relevant and actionable information. Elements, like text and images, should be placed on them in a way that clearly indicates hierarchy. In this project, we use the Card component as a surface for all our other components. For more information on the Card component, see https://material-ui.com/components/cards/ .","title":"3. Our First Component"},{"location":"3_card/#31-html-configuration","text":"Before we start creating any React components, adding the following code in the index.html file between the header and body tags: < style > html , body , # root , # root > div { height : 100 % ; margin : 0 ; } </ style > This code block removes all the margins in the React App (defaults to 8px) and stretches the App to fill 100% of the browser height. Next, like HTML, we also create a separate .css file to store our CSS styles for our React components. Create a file App.css in the same directory as App.js and import it before the function App : import \"./App.css\"","title":"3.1 HTML Configuration"},{"location":"3_card/#32-appjs","text":"Navigate to the App.js file in the Files directory. Note that you should see \"Edit src/App.js and save to reload.\" in the Browser. Also note the boilerplate code already included: import React from \"react\" ; import \"./styles.css\" ; export default function App () { return ( < div className = \"App\" > < h1 > Hello CodeSandbox < /h1> < h2 > Start editing to see some magic happen !< /h2> < /div> ); } There are two parts to the code: Importing components : React is imported into the JavaScript file. This is necessary to distinguish it from non-React JS files. Other CSS and image files are also imported. App Function : Contains JSX code, which allows us to write HTML in React in order to produce React elements. It is neither HTML nor JS. You can read more about JSX here . We also set this function as the default export for App.js . Where is the function App consumed? This App function is imported in index.js , where it is rendered to the React DOM here at the 'root' HTML DOM node. ReactDOM . render ( < React . StrictMode > < App /> < /React.StrictMode>, document . getElementById ( 'root' ) ); Read more about rendering React elements to the DOM here .","title":"3.2 App.js"},{"location":"3_card/#33-rendering-a-card","text":"First, delete everything within the div tag. import React from 'react'; import logo from './logo.svg'; import './App.css'; function App() { return ( <div className=\"App\"> </div> ); } export default App; What is className ? className is a prop used in React for adding CSS classes to React components. You can define your styles in a separate *.css file as usual and refer to them using className . What are React props? Props are arguments passed into React components. React Props are like function arguments in JavaScript and attributes in HTML. To send props into a component, use the same syntax as HTML attributes: Next, add the following CSS styles to App.css : . App { display : flex ; align-items : center ; justify-content : center ; background-color : #80cbc4 ; } Next, refer to the Material-UI documentation on the Card component. Study the sample code for a Simple Card . import React from 'react'; import { makeStyles } from '@material-ui/core/styles'; import Card from '@material-ui/core/Card'; import CardActions from '@material-ui/core/CardActions'; import CardContent from '@material-ui/core/CardContent'; import Button from '@material-ui/core/Button'; import Typography from '@material-ui/core/Typography'; const useStyles = makeStyles({ root: { minWidth: 275, }, bullet: { display: 'inline-block', margin: '0 2px', transform: 'scale(0.8)', }, title: { fontSize: 14, }, pos: { marginBottom: 12, }, }); export default function SimpleCard() { const classes = useStyles(); const bull = <span className={classes.bullet}>\u2022</span>; return ( <Card className={classes.root}> <CardContent> <Typography className={classes.title} color=\"textSecondary\" gutterBottom> Word of the Day </Typography> <Typography variant=\"h5\" component=\"h2\"> be{bull}nev{bull}o{bull}lent </Typography> <Typography className={classes.pos} color=\"textSecondary\"> adjective </Typography> <Typography variant=\"body2\" component=\"p\"> well meaning and kindly. <br /> {'\"a benevolent smile\"'} </Typography> </CardContent> <CardActions> <Button size=\"small\">Learn More</Button> </CardActions> </Card> ); } Now we only need the Card surface and not the content. We can simplify the code as follows: <Card> <CardContent> </CardContent> <CardActions> </CardActions> </Card> Now this to App.js within the div tag. import React from \"react\"; import \"./App.css\"; import { Card } from \"@material-ui/core\"; function App() { return ( <div className=\"App\"> <Card className=\"card\"> <CardContent /> <CardActions /> </Card> </div> ); } export default App; You will notice errors popping up immediately, stating that React components like Card are missing. To fix this, add the necesary imports to the top, below the first line (where React is imported): import { Card , CardContent , CardActions } from \"@material-ui/core\" ; Finally, add the following styles to App.css . This will center the component vertically and horizontally, and change the background color. . card { width : 500 px ; height : 500 px ; padding : 10 px } To apply these CSS styles on the Card component, add a className prop it referencing .card : <Card className=\"card\">","title":"3.3 Rendering a Card"},{"location":"3_card/#34-final-result","text":"Your final code and App should look like this: import React from \"react\"; import \"./App.css\"; import { Card, CardContent, CardActions } from \"@material-ui/core\"; function App() { return ( <div className=\"App\"> <Card className=\"card\"> <CardContent /> <CardActions /> </Card> </div> ); } export default App;","title":"3.4 Final Result"},{"location":"4_components/","text":"4. Adding more Components Now we are ready to add more components to our Card . We will be adding the following components: Typography Divider List Button Click on the respective components to read more about them. 4.1 Adding a Title Import the Typography component from @material-ui/core and add the Typography component between the <CardContent> tags : <CardContent> <Typography variant=\"h4\">Shopping List</Typography> </CardContent> Note <CardContent /> is the same as <CardContent><CardContent/> . The former shortens code and improves readability when a React component has no props. Next import and add a Divider component below it: <Divider /> You should see a title with a horizontal rule on the Card . 4.2 Adding a List Before we create a list, we should first define an array of items that will be displayed in the list. Add the following line of code before the function App : let listItems = [ 'apple' , 'banana' , 'orange' ] Before adding the List component it is good to reference the Material-UI documentation to see the structure of the component. Go to https://material-ui.com/components/lists/ and check out the code for the Simple List . Note the hierarchy of components within the the List component: <List component=\"nav\" aria-label=\"main mailbox folders\"> <ListItem button> <ListItemIcon> <InboxIcon /> </ListItemIcon> <ListItemText primary=\"Inbox\" /> </ListItem> <ListItem button> <ListItemIcon> <DraftsIcon /> </ListItemIcon> <ListItemText primary=\"Drafts\" /> </ListItem> </List> Next, import the List component and add it below the Divider component. Within that component, we want to iterate over each item in listItems to display it in the list as a text. We do this by using the JavaScript map function. Help See https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d for a good explanation on the map function < List > { listItems . map ( item => ( < ListItem > < ListItemText > { item } < /ListItemText> < /ListItem> ))} < /List> Let's also add an icon for each element in the list. Import <ShoppingCartIcon /> from @material-ui/icons and add it below the ListItemText component. import ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\"; // Code omitted for brevity <List> {listItems.map(item => ( <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <ListItemText>{item}</ListItemText> </ListItem> ))} </List> We also want to allow users to remove the items in the list. Import IconButton from @material-ui/core and DeleteForeverIcon from @material-ui/icons and add them below the ListItemText component: import DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"; // Code omitted for brevity <List> {listItems.map(item => ( <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <ListItemText>{item}</ListItemText> <IconButton aria-label=\"delete\"> <DeleteForeverIcon style={{ color: \"red\" }} /> </IconButton> </ListItem> ))} </List> 4.3 Adding a Button Finally, expand the CardActions component and import the Button component. Add the following line of code to render the button: <CardActions> <Button size=\"small\"> Add Item </Button> </CardActions> Finally, go to App.css and remove the height property from .Card . You are done for this section. Note however that the list is not interactive, i.e. clicking on the buttons and the list does not do anything. React will allow us to make these components interactive easily, which we will explore in the next section.","title":"4. Adding more Components"},{"location":"4_components/#4-adding-more-components","text":"Now we are ready to add more components to our Card . We will be adding the following components: Typography Divider List Button Click on the respective components to read more about them.","title":"4. Adding more Components"},{"location":"4_components/#41-adding-a-title","text":"Import the Typography component from @material-ui/core and add the Typography component between the <CardContent> tags : <CardContent> <Typography variant=\"h4\">Shopping List</Typography> </CardContent> Note <CardContent /> is the same as <CardContent><CardContent/> . The former shortens code and improves readability when a React component has no props. Next import and add a Divider component below it: <Divider /> You should see a title with a horizontal rule on the Card .","title":"4.1 Adding a Title"},{"location":"4_components/#42-adding-a-list","text":"Before we create a list, we should first define an array of items that will be displayed in the list. Add the following line of code before the function App : let listItems = [ 'apple' , 'banana' , 'orange' ] Before adding the List component it is good to reference the Material-UI documentation to see the structure of the component. Go to https://material-ui.com/components/lists/ and check out the code for the Simple List . Note the hierarchy of components within the the List component: <List component=\"nav\" aria-label=\"main mailbox folders\"> <ListItem button> <ListItemIcon> <InboxIcon /> </ListItemIcon> <ListItemText primary=\"Inbox\" /> </ListItem> <ListItem button> <ListItemIcon> <DraftsIcon /> </ListItemIcon> <ListItemText primary=\"Drafts\" /> </ListItem> </List> Next, import the List component and add it below the Divider component. Within that component, we want to iterate over each item in listItems to display it in the list as a text. We do this by using the JavaScript map function. Help See https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d for a good explanation on the map function < List > { listItems . map ( item => ( < ListItem > < ListItemText > { item } < /ListItemText> < /ListItem> ))} < /List> Let's also add an icon for each element in the list. Import <ShoppingCartIcon /> from @material-ui/icons and add it below the ListItemText component. import ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\"; // Code omitted for brevity <List> {listItems.map(item => ( <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <ListItemText>{item}</ListItemText> </ListItem> ))} </List> We also want to allow users to remove the items in the list. Import IconButton from @material-ui/core and DeleteForeverIcon from @material-ui/icons and add them below the ListItemText component: import DeleteForeverIcon from \"@material-ui/icons/DeleteForever\"; // Code omitted for brevity <List> {listItems.map(item => ( <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <ListItemText>{item}</ListItemText> <IconButton aria-label=\"delete\"> <DeleteForeverIcon style={{ color: \"red\" }} /> </IconButton> </ListItem> ))} </List>","title":"4.2 Adding a List"},{"location":"4_components/#43-adding-a-button","text":"Finally, expand the CardActions component and import the Button component. Add the following line of code to render the button: <CardActions> <Button size=\"small\"> Add Item </Button> </CardActions> Finally, go to App.css and remove the height property from .Card . You are done for this section. Note however that the list is not interactive, i.e. clicking on the buttons and the list does not do anything. React will allow us to make these components interactive easily, which we will explore in the next section.","title":"4.3 Adding a Button"},{"location":"5_actions/","text":"5. Introducing React Hooks We are finally ready to make the components interactive and responsive to user input. For this project, we will be adding actions on three components: Component User input Response ListItem Click Remove the listItem from the List Delete Icon Click Remove the listItem from the List Button Click Add a listItem with a TextField where users can input text TextField* Enter Add the user input into the List *Only shows when user click on the Button . 5.1 Concepts Before we start interacting the components we need to learn about React Hooks . What is a Hook? A Hook is a special function that lets you \u201chook into\u201d React features. For example, useState is a Hook that lets you add React state to function components. When would I use a Hook? If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We\u2019re going to do that right now! What is a function component? function Example ( props ) { // You can use Hooks here! return < div /> ; } The code above is a function component . They are previously called Stateless components but we can now write functions and states inside them. You can only use Hooks in function components. 5.1.1 UseState Info This section is modified from https://reactjs.org/docs/hooks-overview.html#state-hook This example renders a counter. When you click the button, it increments the value: import React , { useState } from 'react' ; function Example () { // Declare a new state variable, which we'll call \"count\" const [ count , setCount ] = useState ( 0 ); return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } Here, useState is a Hook (we'll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. useState returns a pair: the current state value (i.e. count ), and function that lets you update it (i.e. setCount ). You can call this function from an event handler or somewhere else. Tip It is convention to name the function starting with set , e.g. setCount The only argument to useState is the initial state. In the example above, it is 0 because our counter starts from zero. The initial state argument is only used during the first render. Declaring multiple state variables You can use the State Hook more than once in a single component: function ExampleWithManyStates () { // Declare multiple state variables! const [ age , setAge ] = useState ( 42 ); const [ fruit , setFruit ] = useState ( 'banana' ); const [ todos , setTodos ] = useState ([{ text : 'Learn Hooks' }]); // ... } The array destructuring syntax lets us give different names to the state variables we declared by calling useState . These names aren't a part of the useState API. Instead, React assumes that if you call useState many times, you do it in the same order during every render. We'll come back to why this works and when this is useful later. 5.1.2 Effect Hook You've likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations \"side effects\" (or \"effects\" for short) because they can affect other components and can't be done during rendering. The Effect Hook, useEffect , adds the ability to perform side effects from a function component. For example, this component sets the document title after React updates the DOM: import React , { useState , useEffect } from 'react' ; function Example () { const [ count , setCount ] = useState ( 0 ); // Similar to componentDidMount and componentDidUpdate: useEffect (() => { // Update the document title using the browser API document . title = `You clicked ${ count } times` ; }); return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } When you call useEffect , you're telling React to run your \"effect\" function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render -- including the first render. (We'll talk more about how this compares to class lifecycles in Using the Effect Hook .) Effects may also optionally specify how to \"clean up\" after them by returning a function. For example, this component uses an effect to subscribe to a friend's online status, and cleans up by unsubscribing from it: import React , { useState , useEffect } from 'react' ; function FriendStatus ( props ) { const [ isOnline , setIsOnline ] = useState ( null ); function handleStatusChange ( status ) { setIsOnline ( status . isOnline ); } useEffect (() => { ChatAPI . subscribeToFriendStatus ( props . friend . id , handleStatusChange ); return () => { ChatAPI . unsubscribeFromFriendStatus ( props . friend . id , handleStatusChange ); }; }); if ( isOnline === null ) { return 'Loading...' ; } return isOnline ? 'Online' : 'Offline' ; } In this example, React would unsubscribe from our ChatAPI when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there's a way to tell React to skip re-subscribing if the props.friend.id we passed to ChatAPI didn\u2019t change.) Just like with useState , you can use more than a single effect in a component: function FriendStatusWithCounter ( props ) { const [ count , setCount ] = useState ( 0 ); useEffect (() => { document . title = `You clicked ${ count } times` ; }); const [ isOnline , setIsOnline ] = useState ( null ); useEffect (() => { ChatAPI . subscribeToFriendStatus ( props . friend . id , handleStatusChange ); return () => { ChatAPI . unsubscribeFromFriendStatus ( props . friend . id , handleStatusChange ); }; }); function handleStatusChange ( status ) { setIsOnline ( status . isOnline ); } // ... 5.1.3 Rules of Hooks Hooks are JavaScript functions, but they impose two additional rules: Only call Hooks at the top level . Don\u2019t call Hooks inside loops, conditions, or nested functions. Only call Hooks from React function components . Don\u2019t call Hooks from regular JavaScript functions. We provide a linter plugin to enforce these rules automatically. We understand these rules might seem limiting or confusing at first, but they are essential to making Hooks work well. 5.2 Adding useState hook We need the application to watch over the state for two components: The items in the list The textbox that appears when the user clicks on the \"Add Item\" button. First import useState from React and TextField from @material-ui/core : import React , { useState } from \"react\" ; Remove the listItems variable you initially declared and add the following lines of code below the function App : function App () { const [ listItems , setListItems ] = useState ([ \"Cockles\" , \"Hum\" , \"Mee Siam\" ]); // Initial items in the list const [ textBox , setTextBox ] = useState ( false ); // Initial state of the textbox is disabled // code omitted for brevity } 5.3 Configuring the button When the user clicks on the \"Add Item\" button, we need to: Change the state of textBox to true , Display a textbox as a listItem at the bottom of the List. First, change the code for the Button component to add an onClick prop: < Button onClick = {() => setTextBox ( true )} size = \"small\" > Add Item < /Button> Next, add the following code block just before the </List> tag: {textBox ? ( <div> <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <TextField autoFocus label=\"Enter item\" style={{ width: \"100%\" }} /> </ListItem> <Typography style={{ marginLeft: 70 }} variant=\"subtitle1\"> Press Enter to add{\" \"} </Typography> </div> ) : null} This code conditionally renders the textbox if the state of textBox is set to true . Else it renders nothing. 5.4 Configuring the TextBox Next, we need to add an event listener to the textbox such that when the user presses Enter, it automatically adds the user's input as a new item in listItems . First we need to create a function to append the user's input into listItems . Add the following code before the function App : function appendItem ( item ) { setListItems ( listItems . concat ( item )); setTextBox ( false ); } Warning You can only modify the state of listItems and textBox with setListItems and setTextBox respectively. Do not modify the variable directly. Add the onKeyPress prop to the TextField component: <TextField autoFocus label=\"Enter item\" style={{ width: \"100%\" }} onKeyPress={e => e.key === \"Enter\" ? appendItem(e.target.value) : null } /> 5.5 Configuring the delete icon button Finally, we need to handle the event where the user clicks on the dustbin icon such that it would delete the item from the list. Add the onClick prop to DeleteForeverIcon : < IconButton aria - label = \"delete\" > < DeleteForeverIcon onClick = {() => removeItem ( item )} style = {{ color : \"red\" }} /> < /IconButton> You are done! Test out your app. Does it work like the one below? To build your app, run npm run build or yarn build . It will build the react files into static HTML, CSS and JSS files that can be hosted on an on-premises server or in the cloud. Have any comments or feedback? Contact me !","title":"5. Introducing React Hooks"},{"location":"5_actions/#5-introducing-react-hooks","text":"We are finally ready to make the components interactive and responsive to user input. For this project, we will be adding actions on three components: Component User input Response ListItem Click Remove the listItem from the List Delete Icon Click Remove the listItem from the List Button Click Add a listItem with a TextField where users can input text TextField* Enter Add the user input into the List *Only shows when user click on the Button .","title":"5. Introducing React Hooks"},{"location":"5_actions/#51-concepts","text":"Before we start interacting the components we need to learn about React Hooks . What is a Hook? A Hook is a special function that lets you \u201chook into\u201d React features. For example, useState is a Hook that lets you add React state to function components. When would I use a Hook? If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We\u2019re going to do that right now! What is a function component? function Example ( props ) { // You can use Hooks here! return < div /> ; } The code above is a function component . They are previously called Stateless components but we can now write functions and states inside them. You can only use Hooks in function components.","title":"5.1 Concepts"},{"location":"5_actions/#511-usestate","text":"Info This section is modified from https://reactjs.org/docs/hooks-overview.html#state-hook This example renders a counter. When you click the button, it increments the value: import React , { useState } from 'react' ; function Example () { // Declare a new state variable, which we'll call \"count\" const [ count , setCount ] = useState ( 0 ); return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } Here, useState is a Hook (we'll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. useState returns a pair: the current state value (i.e. count ), and function that lets you update it (i.e. setCount ). You can call this function from an event handler or somewhere else. Tip It is convention to name the function starting with set , e.g. setCount The only argument to useState is the initial state. In the example above, it is 0 because our counter starts from zero. The initial state argument is only used during the first render.","title":"5.1.1 UseState"},{"location":"5_actions/#declaring-multiple-state-variables","text":"You can use the State Hook more than once in a single component: function ExampleWithManyStates () { // Declare multiple state variables! const [ age , setAge ] = useState ( 42 ); const [ fruit , setFruit ] = useState ( 'banana' ); const [ todos , setTodos ] = useState ([{ text : 'Learn Hooks' }]); // ... } The array destructuring syntax lets us give different names to the state variables we declared by calling useState . These names aren't a part of the useState API. Instead, React assumes that if you call useState many times, you do it in the same order during every render. We'll come back to why this works and when this is useful later.","title":"Declaring multiple state variables"},{"location":"5_actions/#512-effect-hook","text":"You've likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations \"side effects\" (or \"effects\" for short) because they can affect other components and can't be done during rendering. The Effect Hook, useEffect , adds the ability to perform side effects from a function component. For example, this component sets the document title after React updates the DOM: import React , { useState , useEffect } from 'react' ; function Example () { const [ count , setCount ] = useState ( 0 ); // Similar to componentDidMount and componentDidUpdate: useEffect (() => { // Update the document title using the browser API document . title = `You clicked ${ count } times` ; }); return ( < div > < p > You clicked { count } times < /p> < button onClick = {() => setCount ( count + 1 )} > Click me < /button> < /div> ); } When you call useEffect , you're telling React to run your \"effect\" function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render -- including the first render. (We'll talk more about how this compares to class lifecycles in Using the Effect Hook .) Effects may also optionally specify how to \"clean up\" after them by returning a function. For example, this component uses an effect to subscribe to a friend's online status, and cleans up by unsubscribing from it: import React , { useState , useEffect } from 'react' ; function FriendStatus ( props ) { const [ isOnline , setIsOnline ] = useState ( null ); function handleStatusChange ( status ) { setIsOnline ( status . isOnline ); } useEffect (() => { ChatAPI . subscribeToFriendStatus ( props . friend . id , handleStatusChange ); return () => { ChatAPI . unsubscribeFromFriendStatus ( props . friend . id , handleStatusChange ); }; }); if ( isOnline === null ) { return 'Loading...' ; } return isOnline ? 'Online' : 'Offline' ; } In this example, React would unsubscribe from our ChatAPI when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there's a way to tell React to skip re-subscribing if the props.friend.id we passed to ChatAPI didn\u2019t change.) Just like with useState , you can use more than a single effect in a component: function FriendStatusWithCounter ( props ) { const [ count , setCount ] = useState ( 0 ); useEffect (() => { document . title = `You clicked ${ count } times` ; }); const [ isOnline , setIsOnline ] = useState ( null ); useEffect (() => { ChatAPI . subscribeToFriendStatus ( props . friend . id , handleStatusChange ); return () => { ChatAPI . unsubscribeFromFriendStatus ( props . friend . id , handleStatusChange ); }; }); function handleStatusChange ( status ) { setIsOnline ( status . isOnline ); } // ...","title":"5.1.2 Effect Hook"},{"location":"5_actions/#513-rules-of-hooks","text":"Hooks are JavaScript functions, but they impose two additional rules: Only call Hooks at the top level . Don\u2019t call Hooks inside loops, conditions, or nested functions. Only call Hooks from React function components . Don\u2019t call Hooks from regular JavaScript functions. We provide a linter plugin to enforce these rules automatically. We understand these rules might seem limiting or confusing at first, but they are essential to making Hooks work well.","title":"5.1.3 Rules of Hooks"},{"location":"5_actions/#52-adding-usestate-hook","text":"We need the application to watch over the state for two components: The items in the list The textbox that appears when the user clicks on the \"Add Item\" button. First import useState from React and TextField from @material-ui/core : import React , { useState } from \"react\" ; Remove the listItems variable you initially declared and add the following lines of code below the function App : function App () { const [ listItems , setListItems ] = useState ([ \"Cockles\" , \"Hum\" , \"Mee Siam\" ]); // Initial items in the list const [ textBox , setTextBox ] = useState ( false ); // Initial state of the textbox is disabled // code omitted for brevity }","title":"5.2 Adding useState hook"},{"location":"5_actions/#53-configuring-the-button","text":"When the user clicks on the \"Add Item\" button, we need to: Change the state of textBox to true , Display a textbox as a listItem at the bottom of the List. First, change the code for the Button component to add an onClick prop: < Button onClick = {() => setTextBox ( true )} size = \"small\" > Add Item < /Button> Next, add the following code block just before the </List> tag: {textBox ? ( <div> <ListItem> <ListItemIcon> <ShoppingCartIcon /> </ListItemIcon> <TextField autoFocus label=\"Enter item\" style={{ width: \"100%\" }} /> </ListItem> <Typography style={{ marginLeft: 70 }} variant=\"subtitle1\"> Press Enter to add{\" \"} </Typography> </div> ) : null} This code conditionally renders the textbox if the state of textBox is set to true . Else it renders nothing.","title":"5.3 Configuring the button"},{"location":"5_actions/#54-configuring-the-textbox","text":"Next, we need to add an event listener to the textbox such that when the user presses Enter, it automatically adds the user's input as a new item in listItems . First we need to create a function to append the user's input into listItems . Add the following code before the function App : function appendItem ( item ) { setListItems ( listItems . concat ( item )); setTextBox ( false ); } Warning You can only modify the state of listItems and textBox with setListItems and setTextBox respectively. Do not modify the variable directly. Add the onKeyPress prop to the TextField component: <TextField autoFocus label=\"Enter item\" style={{ width: \"100%\" }} onKeyPress={e => e.key === \"Enter\" ? appendItem(e.target.value) : null } />","title":"5.4 Configuring the TextBox"},{"location":"5_actions/#55-configuring-the-delete-icon-button","text":"Finally, we need to handle the event where the user clicks on the dustbin icon such that it would delete the item from the list. Add the onClick prop to DeleteForeverIcon : < IconButton aria - label = \"delete\" > < DeleteForeverIcon onClick = {() => removeItem ( item )} style = {{ color : \"red\" }} /> < /IconButton>","title":"5.5 Configuring the delete icon button"},{"location":"5_actions/#you-are-done","text":"Test out your app. Does it work like the one below? To build your app, run npm run build or yarn build . It will build the react files into static HTML, CSS and JSS files that can be hosted on an on-premises server or in the cloud. Have any comments or feedback? Contact me !","title":"You are done!"},{"location":"6_devOps/","text":"Introduction to DevOps The following video provides a good introduction to what DevOps is all about: GitHub Actions GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want. You can read more about GitHub Actions here .","title":"Introduction to DevOps"},{"location":"6_devOps/#introduction-to-devops","text":"The following video provides a good introduction to what DevOps is all about:","title":"Introduction to DevOps"},{"location":"6_devOps/#github-actions","text":"GitHub Actions makes it easy to automate all your software workflows, now with world-class CI/CD. Build, test, and deploy your code right from GitHub. Make code reviews, branch management, and issue triaging work the way you want. You can read more about GitHub Actions here .","title":"GitHub Actions"}]}